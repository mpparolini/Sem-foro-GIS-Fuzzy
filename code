# Parte 1 para puxar a API e desenvolver o algoritmo de tomada de decisão utilizando Fuzzy
import requests
import json
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import time
from pyfirmata import Arduino, util

import semaforo
from semaforo import Semaforo


def buscar_dados(latitude, longitude):
    request = requests.get(f"https://api.tomtom.com/traffic/services/4/flowSegmentData/relative0/10/json?point={latitude}%2C{longitude}&unit=KMPH&openLr=false&key=lYuXbr3j9M5yOWXKoDnzjiS9x5f1gFAz")

    res = json.loads(request.content)
    print (res)
    return res['flowSegmentData']['freeFlowSpeed']

if __name__ == '__main__':
    np.arange(0, 101, 1)
    fluxoveiculos1 = ctrl.Antecedent(np.arange(0, 101, 1), 'fluxo1')
    fluxoveiculos2 = ctrl.Antecedent(np.arange(0, 101, 1), 'fluxo2')
    fluxoveiculos1.universe
    ciclo = ctrl.Consequent(np.arange(0, 61, 1), 'ciclo')
    fluxoveiculos1.automf(number=4, names=['muito lento', 'lento', 'moderado', 'alto'])
    fluxoveiculos2.automf(number=4, names=['muito lento', 'lento', 'moderado', 'alto'])
    ciclo['baixo'] = fuzz.trimf(ciclo.universe, [0, 20, 30])
    ciclo['medio'] = fuzz.trimf(ciclo.universe, [20, 30, 40])
    ciclo['alto'] = fuzz.trimf(ciclo.universe, [30, 40, 60])
    regra1 = ctrl.Rule(fluxoveiculos1['muito lento'] & fluxoveiculos2['muito lento'], ciclo['medio'])
    regra2 = ctrl.Rule(fluxoveiculos1['muito lento'] & fluxoveiculos2['lento'], ciclo['medio'])
    regra3 = ctrl.Rule(fluxoveiculos1['muito lento'] & fluxoveiculos2['moderado'], ciclo['alto'])
    regra4 = ctrl.Rule(fluxoveiculos1['muito lento'] & fluxoveiculos2['alto'], ciclo['alto'])
    regra5 = ctrl.Rule(fluxoveiculos1['lento'] & fluxoveiculos2['muito lento'], ciclo['alto'])
    regra6 = ctrl.Rule(fluxoveiculos1['lento'] & fluxoveiculos2['lento'], ciclo['alto'])
    regra7 = ctrl.Rule(fluxoveiculos1['lento'] & fluxoveiculos2['moderado'], ciclo['medio'])
    regra8 = ctrl.Rule(fluxoveiculos1['lento'] & fluxoveiculos2['alto'], ciclo['alto'])
    regra9 = ctrl.Rule(fluxoveiculos1['moderado'] & fluxoveiculos2['muito lento'], ciclo['alto'])
    regra10 = ctrl.Rule(fluxoveiculos1['moderado'] & fluxoveiculos2['lento'], ciclo['medio'])
    regra11 = ctrl.Rule(fluxoveiculos1['moderado'] & fluxoveiculos2['moderado'], ciclo['medio'])
    regra12 = ctrl.Rule(fluxoveiculos1['moderado'] & fluxoveiculos2['alto'], ciclo['alto'])
    regra13 = ctrl.Rule(fluxoveiculos1['alto'] & fluxoveiculos2['muito lento'], ciclo['baixo'])
    regra14 = ctrl.Rule(fluxoveiculos1['alto'] & fluxoveiculos2['moderado'], ciclo['baixo'])
    regra15 = ctrl.Rule(fluxoveiculos1['alto'] & fluxoveiculos2['alto'], ciclo['baixo'])
    sistema_controle = ctrl.ControlSystem([regra1, regra2, regra3, regra4, regra5, regra6, regra7, regra8, regra9, regra10, regra11, regra12, regra13,regra14, regra15, regra16])
    sistema = ctrl.ControlSystemSimulation(sistema_controle)
    print('Tentando conectar com o Arduino...')
    arduino = Arduino('COM6')
    print('Conectado com Sucesso!!!')

    primeiraVez = True

    regra16 = ctrl.Rule(fluxoveiculos1['alto'] & fluxoveiculos2['alto'], ciclo['medio'])
    while True:
        sistema.input['fluxo1'] = buscar_dados(-23.204203, -45.891510)
        sistema.input['fluxo2'] = buscar_dados(-23.177973, -45.811712)
        sistema.compute()

        if primeiraVez:
            semaforo = Semaforo(sistema.output['ciclo'], arduino)
            semaforo.run()
            primeiraVez = False
        else:
            semaforo.newCicle(sistema.output['ciclo'])
        time.sleep(40)from pyfirmata import Arduino, util
        
        
    # Algoritmo para fazer o ciclo do semáforo
    
    import time
import pyfirmata
import threading


class Semaforo:

    def __init__(self, tverdefase1, arduino):
        self.Uno = arduino
        self.ard_button = self.Uno.digital[2]
        self.tamarelo = 2
        self.ciclototal = 60
        self.tperc = 2
        self.tpercTotal = 6
        self.pedestre_verde = 10
        self.botao = False
        self.tverde1 = tverdefase1
        self.tverde2 = (self.ciclototal - tverdefase1) - self.tpercTotal
        self.tvermelho1 = (self.ciclototal - tverdefase1) - self.tperc
        self.tvermelho2 = tverdefase1 + self.tamarelo
        self.attDados = False
        self.attTverdeTemp = None

    def newCicle(self, tverdefase1):
        self.attDados = True
        self.attTverdeTemp = tverdefase1

    def attNewCicle(self, tverdefase1):
        self.tamarelo = 2
        self.ciclototal = 60
        self.tperc = 2
        self.tpercTotal = 6
        self.pedestre_verde = 10
        self.botao = False
        self.tverde1 = tverdefase1
        self.tverde2 = (self.ciclototal - tverdefase1) - self.tpercTotal
        self.tvermelho1 = (self.ciclototal - tverdefase1) - self.tperc
        self.tvermelho2 = tverdefase1 + self.tamarelo
        self.attDados = False
        self.attTverdeTemp = None

    def run(self):
        # Start iterator to receive input data
        it = pyfirmata.util.Iterator(self.Uno)
        it.start()
        # Setup LEDs and button
        self.ard_button.mode = pyfirmata.INPUT

        threadButton = threading.Thread(target=self.buttonListener, args=(1,))
        threadCicloSemaforo = threading.Thread(target=self.ciclo_semaforo, args=(1,))

        threadButton.start()
        threadCicloSemaforo.start()

    def ciclo_semaforo(self, x):
        cont = 0
        while (cont < 1000):
            if not self.botao:
                if (self.attDados):
                    print('ATUALIZANDO TEMPO DO SEMÁFORO')
                    self.attNewCicle(self.attTverdeTemp)

                # UM CICLO DE 60 SEGUNDOS
                self.desligar_pedestre_verde()
                self.ligar_vermelho2()
                self.ligar_verde1()
                self.ligar_pedestre_vermelho()
                time.sleep(self.tverde1)
                self.ligar_amarelo1()
                self.ligar_pedestre_vermelho()
                time.sleep(self.tamarelo)
                self.ligar_vermelho1()
                self.ligar_verde2()
                self.ligar_pedestre_vermelho()
                time.sleep(self.tverde2)
                self.ligar_amarelo2()
                self.ligar_pedestre_vermelho()
                time.sleep(self.tamarelo)
                self.ligar_vermelho2()
                self.ligar_pedestre_vermelho()
                time.sleep(self.tperc)
                cont += 1


            else:
                print('Ciclo do pedestre')
                self.desligar_pedestre_vermelho()
                self.ligar_vermelho2()
                self.ligar_vermelho1()
                self.ligar_pedestre_verde()
                time.sleep(self.pedestre_verde)
                self.botao = False

    def buttonListener(self, x):
        while True:
            time.sleep(0.1)
            button_state = self.ard_button.read()
            if button_state != 0:
                print('BOTÃO PRESSIONADO!')
                self.botao = True

    def ligar_verde1(self):
        self.apagar_todos1()
        print("LIGANDO O VERDE 1")
        self.Uno.digital[11].write(1)

    def ligar_amarelo1(self):
        self.apagar_todos1()
        print("LIGANDO O AMARELO 1")
        self.Uno.digital[12].write(1)

    def ligar_vermelho1(self):
        self.apagar_todos1()
        print("LIGANDO O VERMELHO 1")
        self.Uno.digital[13].write(1)

    def apagar_todos1(self):
        print('APAGA TODAS AS LUZES 1')
        self.Uno.digital[11].write(0)
        self.Uno.digital[12].write(0)
        self.Uno.digital[13].write(0)

    def ligar_verde2(self):
        self.apagar_todos2()
        print("LIGANDO O VERDE 2")
        self.Uno.digital[8].write(1)
        self.Uno.digital[5].write(1)

    def ligar_amarelo2(self):
        self.apagar_todos2()
        print("LIGANDO O AMARELO 2")
        self.Uno.digital[9].write(1)
        self.Uno.digital[6].write(1)

    def ligar_vermelho2(self):
        self.apagar_todos2()
        print("LIGANDO O VERMELHO 2")
        self.Uno.digital[10].write(1)
        self.Uno.digital[7].write(1)

    def apagar_todos2(self):
        print('APAGA TODAS AS LUZES 2')
        self.Uno.digital[5].write(0)
        self.Uno.digital[6].write(0)
        self.Uno.digital[7].write(0)
        self.Uno.digital[8].write(0)
        self.Uno.digital[9].write(0)
        self.Uno.digital[10].write(0)

    def ligar_pedestre_verde(self):
        self.Uno.digital[3].write(1)

    def desligar_pedestre_verde(self):
        self.Uno.digital[3].write(0)

    def ligar_pedestre_vermelho(self):
        self.Uno.digital[4].write(1)

    def desligar_pedestre_vermelho(self):
        self.Uno.digital[4].write(0)

    def __str__(self) -> str:
        return f"""Tempo amarelo: {self.tamarelo}\nCiclo Total: {self.ciclototal}\n Tempo de percepção: {self.tperc}\n
        Tempo de percepção total: {self.tpercTotal}\n
        Tempo pedestre_verde: {self.pedestre_verde}\n
        Botão: {self.botao}\n
        Tempo verde fase 1: {self.tverde1}\n
        Tempo verde fase 2: {self.tverde2}\n
        Tempo vermelho fase 1: {self.tvermelho1}\n
        Tempo vermelho fase 2: {self.tvermelho2}\n
"""
